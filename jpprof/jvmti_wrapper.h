
// Copyright 2020 chuanshenglu@gmail.com
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: this file was generated automatically, please do not modify it directly!

#ifndef __jvmti_wrapper_H__
#define __jvmti_wrapper_H__

#ifdef __cplusplus
extern "C" {
#endif

// jvmtiError (JNICALL *SetEventNotificationMode) (jvmtiEnv* env,jvmtiEventMode mode,jvmtiEvent event_type,jthread event_thread,...);
int SetEventNotificationMode(void* env, int mode, int event_type, void* event_thread, ...);

#if JVMTI_VERSION >= 0x300B0000
// jvmtiError (JNICALL *GetAllModules) (jvmtiEnv* env,jint* module_count_ptr,jobject** modules_ptr);
int GetAllModules(void* env, void* module_count_ptr, void* modules_ptr);
#endif

// jvmtiError (JNICALL *GetAllThreads) (jvmtiEnv* env,jint* threads_count_ptr,jthread** threads_ptr);
int GetAllThreads(void* env, void* threads_count_ptr, void* threads_ptr);

// jvmtiError (JNICALL *SuspendThread) (jvmtiEnv* env,jthread thread);
int SuspendThread(void* env, void* thread);

// jvmtiError (JNICALL *ResumeThread) (jvmtiEnv* env,jthread thread);
int ResumeThread(void* env, void* thread);

// jvmtiError (JNICALL *StopThread) (jvmtiEnv* env,jthread thread,jobject exception);
int StopThread(void* env, void* thread, void* exception);

// jvmtiError (JNICALL *InterruptThread) (jvmtiEnv* env,jthread thread);
int InterruptThread(void* env, void* thread);

// jvmtiError (JNICALL *GetThreadInfo) (jvmtiEnv* env,jthread thread,jvmtiThreadInfo* info_ptr);
int GetThreadInfo(void* env, void* thread, void* info_ptr);

// jvmtiError (JNICALL *GetOwnedMonitorInfo) (jvmtiEnv* env,jthread thread,jint* owned_monitor_count_ptr,jobject** owned_monitors_ptr);
int GetOwnedMonitorInfo(void* env, void* thread, void* owned_monitor_count_ptr, void* owned_monitors_ptr);

// jvmtiError (JNICALL *GetCurrentContendedMonitor) (jvmtiEnv* env,jthread thread,jobject* monitor_ptr);
int GetCurrentContendedMonitor(void* env, void* thread, void* monitor_ptr);

// jvmtiError (JNICALL *RunAgentThread) (jvmtiEnv* env,jthread thread,jvmtiStartFunction proc,const void* arg,jint priority);
int RunAgentThread(void* env, void* thread, void* proc, void* arg, int priority);

// jvmtiError (JNICALL *GetTopThreadGroups) (jvmtiEnv* env,jint* group_count_ptr,jthreadGroup** groups_ptr);
int GetTopThreadGroups(void* env, void* group_count_ptr, void* groups_ptr);

// jvmtiError (JNICALL *GetThreadGroupInfo) (jvmtiEnv* env,jthreadGroup group,jvmtiThreadGroupInfo* info_ptr);
int GetThreadGroupInfo(void* env, void* group, void* info_ptr);

// jvmtiError (JNICALL *GetThreadGroupChildren) (jvmtiEnv* env,jthreadGroup group,jint* thread_count_ptr,jthread** threads_ptr,jint* group_count_ptr,jthreadGroup** groups_ptr);
int GetThreadGroupChildren(void* env, void* group, void* thread_count_ptr, void* threads_ptr, void* group_count_ptr, void* groups_ptr);

// jvmtiError (JNICALL *GetFrameCount) (jvmtiEnv* env,jthread thread,jint* count_ptr);
int GetFrameCount(void* env, void* thread, void* count_ptr);

// jvmtiError (JNICALL *GetThreadState) (jvmtiEnv* env,jthread thread,jint* thread_state_ptr);
int GetThreadState(void* env, void* thread, void* thread_state_ptr);

// jvmtiError (JNICALL *GetCurrentThread) (jvmtiEnv* env,jthread* thread_ptr);
int GetCurrentThread(void* env, void* thread_ptr);

// jvmtiError (JNICALL *GetFrameLocation) (jvmtiEnv* env,jthread thread,jint depth,jmethodID* method_ptr,jlocation* location_ptr);
int GetFrameLocation(void* env, void* thread, int depth, void* method_ptr, void* location_ptr);

// jvmtiError (JNICALL *NotifyFramePop) (jvmtiEnv* env,jthread thread,jint depth);
int NotifyFramePop(void* env, void* thread, int depth);

// jvmtiError (JNICALL *GetLocalObject) (jvmtiEnv* env,jthread thread,jint depth,jint slot,jobject* value_ptr);
int GetLocalObject(void* env, void* thread, int depth, int slot, void* value_ptr);

// jvmtiError (JNICALL *GetLocalInt) (jvmtiEnv* env,jthread thread,jint depth,jint slot,jint* value_ptr);
int GetLocalInt(void* env, void* thread, int depth, int slot, void* value_ptr);

// jvmtiError (JNICALL *GetLocalLong) (jvmtiEnv* env,jthread thread,jint depth,jint slot,jlong* value_ptr);
int GetLocalLong(void* env, void* thread, int depth, int slot, void* value_ptr);

// jvmtiError (JNICALL *GetLocalFloat) (jvmtiEnv* env,jthread thread,jint depth,jint slot,jfloat* value_ptr);
int GetLocalFloat(void* env, void* thread, int depth, int slot, void* value_ptr);

// jvmtiError (JNICALL *GetLocalDouble) (jvmtiEnv* env,jthread thread,jint depth,jint slot,jdouble* value_ptr);
int GetLocalDouble(void* env, void* thread, int depth, int slot, void* value_ptr);

// jvmtiError (JNICALL *SetLocalObject) (jvmtiEnv* env,jthread thread,jint depth,jint slot,jobject value);
int SetLocalObject(void* env, void* thread, int depth, int slot, void* value);

// jvmtiError (JNICALL *SetLocalInt) (jvmtiEnv* env,jthread thread,jint depth,jint slot,jint value);
int SetLocalInt(void* env, void* thread, int depth, int slot, int value);

// jvmtiError (JNICALL *SetLocalLong) (jvmtiEnv* env,jthread thread,jint depth,jint slot,jlong value);
int SetLocalLong(void* env, void* thread, int depth, int slot, long long value);

// jvmtiError (JNICALL *SetLocalFloat) (jvmtiEnv* env,jthread thread,jint depth,jint slot,jfloat value);
int SetLocalFloat(void* env, void* thread, int depth, int slot, float value);

// jvmtiError (JNICALL *SetLocalDouble) (jvmtiEnv* env,jthread thread,jint depth,jint slot,jdouble value);
int SetLocalDouble(void* env, void* thread, int depth, int slot, double value);

// jvmtiError (JNICALL *CreateRawMonitor) (jvmtiEnv* env,const char* name,jrawMonitorID* monitor_ptr);
int CreateRawMonitor(void* env, void* name, void* monitor_ptr);

// jvmtiError (JNICALL *DestroyRawMonitor) (jvmtiEnv* env,jrawMonitorID monitor);
int DestroyRawMonitor(void* env, void* monitor);

// jvmtiError (JNICALL *RawMonitorEnter) (jvmtiEnv* env,jrawMonitorID monitor);
int RawMonitorEnter(void* env, void* monitor);

// jvmtiError (JNICALL *RawMonitorExit) (jvmtiEnv* env,jrawMonitorID monitor);
int RawMonitorExit(void* env, void* monitor);

// jvmtiError (JNICALL *RawMonitorWait) (jvmtiEnv* env,jrawMonitorID monitor,jlong millis);
int RawMonitorWait(void* env, void* monitor, long long millis);

// jvmtiError (JNICALL *RawMonitorNotify) (jvmtiEnv* env,jrawMonitorID monitor);
int RawMonitorNotify(void* env, void* monitor);

// jvmtiError (JNICALL *RawMonitorNotifyAll) (jvmtiEnv* env,jrawMonitorID monitor);
int RawMonitorNotifyAll(void* env, void* monitor);

// jvmtiError (JNICALL *SetBreakpoint) (jvmtiEnv* env,jmethodID method,jlocation location);
int SetBreakpoint(void* env, void* method, void* location);

// jvmtiError (JNICALL *ClearBreakpoint) (jvmtiEnv* env,jmethodID method,jlocation location);
int ClearBreakpoint(void* env, void* method, void* location);

#if JVMTI_VERSION >= 0x300B0000
// jvmtiError (JNICALL *GetNamedModule) (jvmtiEnv* env,jobject class_loader,const char* package_name,jobject* module_ptr);
int GetNamedModule(void* env, void* class_loader, void* package_name, void* module_ptr);
#endif

// jvmtiError (JNICALL *SetFieldAccessWatch) (jvmtiEnv* env,jclass klass,jfieldID field);
int SetFieldAccessWatch(void* env, void* klass, void* field);

// jvmtiError (JNICALL *ClearFieldAccessWatch) (jvmtiEnv* env,jclass klass,jfieldID field);
int ClearFieldAccessWatch(void* env, void* klass, void* field);

// jvmtiError (JNICALL *SetFieldModificationWatch) (jvmtiEnv* env,jclass klass,jfieldID field);
int SetFieldModificationWatch(void* env, void* klass, void* field);

// jvmtiError (JNICALL *ClearFieldModificationWatch) (jvmtiEnv* env,jclass klass,jfieldID field);
int ClearFieldModificationWatch(void* env, void* klass, void* field);

// jvmtiError (JNICALL *IsModifiableClass) (jvmtiEnv* env,jclass klass,jboolean* is_modifiable_class_ptr);
int IsModifiableClass(void* env, void* klass, void* is_modifiable_class_ptr);

// jvmtiError (JNICALL *Allocate) (jvmtiEnv* env,jlong size,unsigned char** mem_ptr);
int Allocate(void* env, long long size, void* mem_ptr);

// jvmtiError (JNICALL *Deallocate) (jvmtiEnv* env,unsigned char* mem);
int Deallocate(void* env, void* mem);

// jvmtiError (JNICALL *GetClassSignature) (jvmtiEnv* env,jclass klass,char** signature_ptr,char** generic_ptr);
int GetClassSignature(void* env, void* klass, void* signature_ptr, void* generic_ptr);

// jvmtiError (JNICALL *GetClassStatus) (jvmtiEnv* env,jclass klass,jint* status_ptr);
int GetClassStatus(void* env, void* klass, void* status_ptr);

// jvmtiError (JNICALL *GetSourceFileName) (jvmtiEnv* env,jclass klass,char** source_name_ptr);
int GetSourceFileName(void* env, void* klass, void* source_name_ptr);

// jvmtiError (JNICALL *GetClassModifiers) (jvmtiEnv* env,jclass klass,jint* modifiers_ptr);
int GetClassModifiers(void* env, void* klass, void* modifiers_ptr);

// jvmtiError (JNICALL *GetClassMethods) (jvmtiEnv* env,jclass klass,jint* method_count_ptr,jmethodID** methods_ptr);
int GetClassMethods(void* env, void* klass, void* method_count_ptr, void* methods_ptr);

// jvmtiError (JNICALL *GetClassFields) (jvmtiEnv* env,jclass klass,jint* field_count_ptr,jfieldID** fields_ptr);
int GetClassFields(void* env, void* klass, void* field_count_ptr, void* fields_ptr);

// jvmtiError (JNICALL *GetImplementedInterfaces) (jvmtiEnv* env,jclass klass,jint* interface_count_ptr,jclass** interfaces_ptr);
int GetImplementedInterfaces(void* env, void* klass, void* interface_count_ptr, void* interfaces_ptr);

// jvmtiError (JNICALL *IsInterface) (jvmtiEnv* env,jclass klass,jboolean* is_interface_ptr);
int IsInterface(void* env, void* klass, void* is_interface_ptr);

// jvmtiError (JNICALL *IsArrayClass) (jvmtiEnv* env,jclass klass,jboolean* is_array_class_ptr);
int IsArrayClass(void* env, void* klass, void* is_array_class_ptr);

// jvmtiError (JNICALL *GetClassLoader) (jvmtiEnv* env,jclass klass,jobject* classloader_ptr);
int GetClassLoader(void* env, void* klass, void* classloader_ptr);

// jvmtiError (JNICALL *GetObjectHashCode) (jvmtiEnv* env,jobject object,jint* hash_code_ptr);
int GetObjectHashCode(void* env, void* object, void* hash_code_ptr);

// jvmtiError (JNICALL *GetObjectMonitorUsage) (jvmtiEnv* env,jobject object,jvmtiMonitorUsage* info_ptr);
int GetObjectMonitorUsage(void* env, void* object, void* info_ptr);

// jvmtiError (JNICALL *GetFieldName) (jvmtiEnv* env,jclass klass,jfieldID field,char** name_ptr,char** signature_ptr,char** generic_ptr);
int GetFieldName(void* env, void* klass, void* field, void* name_ptr, void* signature_ptr, void* generic_ptr);

// jvmtiError (JNICALL *GetFieldDeclaringClass) (jvmtiEnv* env,jclass klass,jfieldID field,jclass* declaring_class_ptr);
int GetFieldDeclaringClass(void* env, void* klass, void* field, void* declaring_class_ptr);

// jvmtiError (JNICALL *GetFieldModifiers) (jvmtiEnv* env,jclass klass,jfieldID field,jint* modifiers_ptr);
int GetFieldModifiers(void* env, void* klass, void* field, void* modifiers_ptr);

// jvmtiError (JNICALL *IsFieldSynthetic) (jvmtiEnv* env,jclass klass,jfieldID field,jboolean* is_synthetic_ptr);
int IsFieldSynthetic(void* env, void* klass, void* field, void* is_synthetic_ptr);

// jvmtiError (JNICALL *GetMethodName) (jvmtiEnv* env,jmethodID method,char** name_ptr,char** signature_ptr,char** generic_ptr);
int GetMethodName(void* env, void* method, void* name_ptr, void* signature_ptr, void* generic_ptr);

// jvmtiError (JNICALL *GetMethodDeclaringClass) (jvmtiEnv* env,jmethodID method,jclass* declaring_class_ptr);
int GetMethodDeclaringClass(void* env, void* method, void* declaring_class_ptr);

// jvmtiError (JNICALL *GetMethodModifiers) (jvmtiEnv* env,jmethodID method,jint* modifiers_ptr);
int GetMethodModifiers(void* env, void* method, void* modifiers_ptr);

// jvmtiError (JNICALL *GetMaxLocals) (jvmtiEnv* env,jmethodID method,jint* max_ptr);
int GetMaxLocals(void* env, void* method, void* max_ptr);

// jvmtiError (JNICALL *GetArgumentsSize) (jvmtiEnv* env,jmethodID method,jint* size_ptr);
int GetArgumentsSize(void* env, void* method, void* size_ptr);

// jvmtiError (JNICALL *GetLineNumberTable) (jvmtiEnv* env,jmethodID method,jint* entry_count_ptr,jvmtiLineNumberEntry** table_ptr);
int GetLineNumberTable(void* env, void* method, void* entry_count_ptr, void* table_ptr);

// jvmtiError (JNICALL *GetMethodLocation) (jvmtiEnv* env,jmethodID method,jlocation* start_location_ptr,jlocation* end_location_ptr);
int GetMethodLocation(void* env, void* method, void* start_location_ptr, void* end_location_ptr);

// jvmtiError (JNICALL *GetLocalVariableTable) (jvmtiEnv* env,jmethodID method,jint* entry_count_ptr,jvmtiLocalVariableEntry** table_ptr);
int GetLocalVariableTable(void* env, void* method, void* entry_count_ptr, void* table_ptr);

// jvmtiError (JNICALL *SetNativeMethodPrefix) (jvmtiEnv* env,const char* prefix);
int SetNativeMethodPrefix(void* env, void* prefix);

// jvmtiError (JNICALL *SetNativeMethodPrefixes) (jvmtiEnv* env,jint prefix_count,char** prefixes);
int SetNativeMethodPrefixes(void* env, int prefix_count, void* prefixes);

// jvmtiError (JNICALL *GetBytecodes) (jvmtiEnv* env,jmethodID method,jint* bytecode_count_ptr,unsigned char** bytecodes_ptr);
int GetBytecodes(void* env, void* method, void* bytecode_count_ptr, void* bytecodes_ptr);

// jvmtiError (JNICALL *IsMethodNative) (jvmtiEnv* env,jmethodID method,jboolean* is_native_ptr);
int IsMethodNative(void* env, void* method, void* is_native_ptr);

// jvmtiError (JNICALL *IsMethodSynthetic) (jvmtiEnv* env,jmethodID method,jboolean* is_synthetic_ptr);
int IsMethodSynthetic(void* env, void* method, void* is_synthetic_ptr);

// jvmtiError (JNICALL *GetLoadedClasses) (jvmtiEnv* env,jint* class_count_ptr,jclass** classes_ptr);
int GetLoadedClasses(void* env, void* class_count_ptr, void* classes_ptr);

// jvmtiError (JNICALL *GetClassLoaderClasses) (jvmtiEnv* env,jobject initiating_loader,jint* class_count_ptr,jclass** classes_ptr);
int GetClassLoaderClasses(void* env, void* initiating_loader, void* class_count_ptr, void* classes_ptr);

// jvmtiError (JNICALL *PopFrame) (jvmtiEnv* env,jthread thread);
int PopFrame(void* env, void* thread);

// jvmtiError (JNICALL *ForceEarlyReturnObject) (jvmtiEnv* env,jthread thread,jobject value);
int ForceEarlyReturnObject(void* env, void* thread, void* value);

// jvmtiError (JNICALL *ForceEarlyReturnInt) (jvmtiEnv* env,jthread thread,jint value);
int ForceEarlyReturnInt(void* env, void* thread, int value);

// jvmtiError (JNICALL *ForceEarlyReturnLong) (jvmtiEnv* env,jthread thread,jlong value);
int ForceEarlyReturnLong(void* env, void* thread, long long value);

// jvmtiError (JNICALL *ForceEarlyReturnFloat) (jvmtiEnv* env,jthread thread,jfloat value);
int ForceEarlyReturnFloat(void* env, void* thread, float value);

// jvmtiError (JNICALL *ForceEarlyReturnDouble) (jvmtiEnv* env,jthread thread,jdouble value);
int ForceEarlyReturnDouble(void* env, void* thread, double value);

// jvmtiError (JNICALL *ForceEarlyReturnVoid) (jvmtiEnv* env,jthread thread);
int ForceEarlyReturnVoid(void* env, void* thread);

// jvmtiError (JNICALL *RedefineClasses) (jvmtiEnv* env,jint class_count,const jvmtiClassDefinition* class_definitions);
int RedefineClasses(void* env, int class_count, void* class_definitions);

// jvmtiError (JNICALL *GetVersionNumber) (jvmtiEnv* env,jint* version_ptr);
int GetVersionNumber(void* env, void* version_ptr);

// jvmtiError (JNICALL *GetCapabilities) (jvmtiEnv* env,jvmtiCapabilities* capabilities_ptr);
int GetCapabilities(void* env, void* capabilities_ptr);

// jvmtiError (JNICALL *GetSourceDebugExtension) (jvmtiEnv* env,jclass klass,char** source_debug_extension_ptr);
int GetSourceDebugExtension(void* env, void* klass, void* source_debug_extension_ptr);

// jvmtiError (JNICALL *IsMethodObsolete) (jvmtiEnv* env,jmethodID method,jboolean* is_obsolete_ptr);
int IsMethodObsolete(void* env, void* method, void* is_obsolete_ptr);

// jvmtiError (JNICALL *SuspendThreadList) (jvmtiEnv* env,jint request_count,const jthread* request_list,jvmtiError* results);
int SuspendThreadList(void* env, int request_count, void* request_list, void* results);

// jvmtiError (JNICALL *ResumeThreadList) (jvmtiEnv* env,jint request_count,const jthread* request_list,jvmtiError* results);
int ResumeThreadList(void* env, int request_count, void* request_list, void* results);

#if JVMTI_VERSION >= 0x300B0000
// jvmtiError (JNICALL *AddModuleReads) (jvmtiEnv* env,jobject module,jobject to_module);
int AddModuleReads(void* env, void* module, void* to_module);

// jvmtiError (JNICALL *AddModuleExports) (jvmtiEnv* env,jobject module,const char* pkg_name,jobject to_module);
int AddModuleExports(void* env, void* module, void* pkg_name, void* to_module);

// jvmtiError (JNICALL *AddModuleOpens) (jvmtiEnv* env,jobject module,const char* pkg_name,jobject to_module);
int AddModuleOpens(void* env, void* module, void* pkg_name, void* to_module);

// jvmtiError (JNICALL *AddModuleUses) (jvmtiEnv* env,jobject module,jclass service);
int AddModuleUses(void* env, void* module, void* service);

// jvmtiError (JNICALL *AddModuleProvides) (jvmtiEnv* env,jobject module,jclass service,jclass impl_class);
int AddModuleProvides(void* env, void* module, void* service, void* impl_class);

// jvmtiError (JNICALL *IsModifiableModule) (jvmtiEnv* env,jobject module,jboolean* is_modifiable_module_ptr);
int IsModifiableModule(void* env, void* module, void* is_modifiable_module_ptr);
#endif

// jvmtiError (JNICALL *GetAllStackTraces) (jvmtiEnv* env,jint max_frame_count,jvmtiStackInfo** stack_info_ptr,jint* thread_count_ptr);
int GetAllStackTraces(void* env, int max_frame_count, void* stack_info_ptr, void* thread_count_ptr);

// jvmtiError (JNICALL *GetThreadListStackTraces) (jvmtiEnv* env,jint thread_count,const jthread* thread_list,jint max_frame_count,jvmtiStackInfo** stack_info_ptr);
int GetThreadListStackTraces(void* env, int thread_count, void* thread_list, int max_frame_count, void* stack_info_ptr);

// jvmtiError (JNICALL *GetThreadLocalStorage) (jvmtiEnv* env,jthread thread,void** data_ptr);
int GetThreadLocalStorage(void* env, void* thread, void* data_ptr);

// jvmtiError (JNICALL *SetThreadLocalStorage) (jvmtiEnv* env,jthread thread,const void* data);
int SetThreadLocalStorage(void* env, void* thread, void* data);

// jvmtiError (JNICALL *GetStackTrace) (jvmtiEnv* env,jthread thread,jint start_depth,jint max_frame_count,jvmtiFrameInfo* frame_buffer,jint* count_ptr);
int GetStackTrace(void* env, void* thread, int start_depth, int max_frame_count, void* frame_buffer, void* count_ptr);

// jvmtiError (JNICALL *GetTag) (jvmtiEnv* env,jobject object,jlong* tag_ptr);
int GetTag(void* env, void* object, void* tag_ptr);

// jvmtiError (JNICALL *SetTag) (jvmtiEnv* env,jobject object,jlong tag);
int SetTag(void* env, void* object, long long tag);

// jvmtiError (JNICALL *ForceGarbageCollection) (jvmtiEnv* env);
int ForceGarbageCollection(void* env);

// jvmtiError (JNICALL *IterateOverObjectsReachableFromObject) (jvmtiEnv* env,jobject object,jvmtiObjectReferenceCallback object_reference_callback,const void* user_data);
int IterateOverObjectsReachableFromObject(void* env, void* object, void* object_reference_callback, void* user_data);

// jvmtiError (JNICALL *IterateOverReachableObjects) (jvmtiEnv* env,jvmtiHeapRootCallback heap_root_callback,jvmtiStackReferenceCallback stack_ref_callback,jvmtiObjectReferenceCallback object_ref_callback,const void* user_data);
int IterateOverReachableObjects(void* env, void* heap_root_callback, void* stack_ref_callback, void* object_ref_callback, void* user_data);

// jvmtiError (JNICALL *IterateOverHeap) (jvmtiEnv* env,jvmtiHeapObjectFilter object_filter,jvmtiHeapObjectCallback heap_object_callback,const void* user_data);
int IterateOverHeap(void* env, void* object_filter, void* heap_object_callback, void* user_data);

// jvmtiError (JNICALL *IterateOverInstancesOfClass) (jvmtiEnv* env,jclass klass,jvmtiHeapObjectFilter object_filter,jvmtiHeapObjectCallback heap_object_callback,const void* user_data);
int IterateOverInstancesOfClass(void* env, void* klass, void* object_filter, void* heap_object_callback, void* user_data);

// jvmtiError (JNICALL *GetObjectsWithTags) (jvmtiEnv* env,jint tag_count,const jlong* tags,jint* count_ptr,jobject** object_result_ptr,jlong** tag_result_ptr);
int GetObjectsWithTags(void* env, int tag_count, void* tags, void* count_ptr, void* object_result_ptr, void* tag_result_ptr);

// jvmtiError (JNICALL *FollowReferences) (jvmtiEnv* env,jint heap_filter,jclass klass,jobject initial_object,const jvmtiHeapCallbacks* callbacks,const void* user_data);
int FollowReferences(void* env, int heap_filter, void* klass, void* initial_object, void* callbacks, void* user_data);

// jvmtiError (JNICALL *IterateThroughHeap) (jvmtiEnv* env,jint heap_filter,jclass klass,const jvmtiHeapCallbacks* callbacks,const void* user_data);
int IterateThroughHeap(void* env, int heap_filter, void* klass, void* callbacks, void* user_data);

// jvmtiError (JNICALL *SetJNIFunctionTable) (jvmtiEnv* env,const jniNativeInterface* function_table);
int SetJNIFunctionTable(void* env, void* function_table);

// jvmtiError (JNICALL *GetJNIFunctionTable) (jvmtiEnv* env,jniNativeInterface** function_table);
int GetJNIFunctionTable(void* env, void* function_table);

// jvmtiError (JNICALL *SetEventCallbacks) (jvmtiEnv* env,const jvmtiEventCallbacks* callbacks,jint size_of_callbacks);
int SetEventCallbacks(void* env, void* callbacks, int size_of_callbacks);

// jvmtiError (JNICALL *GenerateEvents) (jvmtiEnv* env,jvmtiEvent event_type);
int GenerateEvents(void* env, int event_type);

// jvmtiError (JNICALL *GetExtensionFunctions) (jvmtiEnv* env,jint* extension_count_ptr,jvmtiExtensionFunctionInfo** extensions);
int GetExtensionFunctions(void* env, void* extension_count_ptr, void* extensions);

// jvmtiError (JNICALL *GetExtensionEvents) (jvmtiEnv* env,jint* extension_count_ptr,jvmtiExtensionEventInfo** extensions);
int GetExtensionEvents(void* env, void* extension_count_ptr, void* extensions);

// jvmtiError (JNICALL *SetExtensionEventCallback) (jvmtiEnv* env,jint extension_event_index,jvmtiExtensionEvent callback);
int SetExtensionEventCallback(void* env, int extension_event_index, void* callback);

// jvmtiError (JNICALL *DisposeEnvironment) (jvmtiEnv* env);
int DisposeEnvironment(void* env);

// jvmtiError (JNICALL *GetErrorName) (jvmtiEnv* env,jvmtiError error,char** name_ptr);
int GetErrorName(void* env, int error, void* name_ptr);

// jvmtiError (JNICALL *GetJLocationFormat) (jvmtiEnv* env,jvmtiJlocationFormat* format_ptr);
int GetJLocationFormat(void* env, void* format_ptr);

// jvmtiError (JNICALL *GetSystemProperties) (jvmtiEnv* env,jint* count_ptr,char*** property_ptr);
int GetSystemProperties(void* env, void* count_ptr, void* property_ptr);

// jvmtiError (JNICALL *GetSystemProperty) (jvmtiEnv* env,const char* property,char** value_ptr);
int GetSystemProperty(void* env, void* property, void* value_ptr);

// jvmtiError (JNICALL *SetSystemProperty) (jvmtiEnv* env,const char* property,const char* value_ptr);
int SetSystemProperty(void* env, void* property, void* value_ptr);

// jvmtiError (JNICALL *GetPhase) (jvmtiEnv* env,jvmtiPhase* phase_ptr);
int GetPhase(void* env, void* phase_ptr);

// jvmtiError (JNICALL *GetCurrentThreadCpuTimerInfo) (jvmtiEnv* env,jvmtiTimerInfo* info_ptr);
int GetCurrentThreadCpuTimerInfo(void* env, void* info_ptr);

// jvmtiError (JNICALL *GetCurrentThreadCpuTime) (jvmtiEnv* env,jlong* nanos_ptr);
int GetCurrentThreadCpuTime(void* env, void* nanos_ptr);

// jvmtiError (JNICALL *GetThreadCpuTimerInfo) (jvmtiEnv* env,jvmtiTimerInfo* info_ptr);
int GetThreadCpuTimerInfo(void* env, void* info_ptr);

// jvmtiError (JNICALL *GetThreadCpuTime) (jvmtiEnv* env,jthread thread,jlong* nanos_ptr);
int GetThreadCpuTime(void* env, void* thread, void* nanos_ptr);

// jvmtiError (JNICALL *GetTimerInfo) (jvmtiEnv* env,jvmtiTimerInfo* info_ptr);
int GetTimerInfo(void* env, void* info_ptr);

// jvmtiError (JNICALL *GetTime) (jvmtiEnv* env,jlong* nanos_ptr);
int GetTime(void* env, void* nanos_ptr);

// jvmtiError (JNICALL *GetPotentialCapabilities) (jvmtiEnv* env,jvmtiCapabilities* capabilities_ptr);
int GetPotentialCapabilities(void* env, void* capabilities_ptr);

// jvmtiError (JNICALL *AddCapabilities) (jvmtiEnv* env,const jvmtiCapabilities* capabilities_ptr);
int AddCapabilities(void* env, void* capabilities_ptr);

// jvmtiError (JNICALL *RelinquishCapabilities) (jvmtiEnv* env,const jvmtiCapabilities* capabilities_ptr);
int RelinquishCapabilities(void* env, void* capabilities_ptr);

// jvmtiError (JNICALL *GetAvailableProcessors) (jvmtiEnv* env,jint* processor_count_ptr);
int GetAvailableProcessors(void* env, void* processor_count_ptr);

// jvmtiError (JNICALL *GetClassVersionNumbers) (jvmtiEnv* env,jclass klass,jint* minor_version_ptr,jint* major_version_ptr);
int GetClassVersionNumbers(void* env, void* klass, void* minor_version_ptr, void* major_version_ptr);

// jvmtiError (JNICALL *GetConstantPool) (jvmtiEnv* env,jclass klass,jint* constant_pool_count_ptr,jint* constant_pool_byte_count_ptr,unsigned char** constant_pool_bytes_ptr);
int GetConstantPool(void* env, void* klass, void* constant_pool_count_ptr, void* constant_pool_byte_count_ptr, void* constant_pool_bytes_ptr);

// jvmtiError (JNICALL *GetEnvironmentLocalStorage) (jvmtiEnv* env,void** data_ptr);
int GetEnvironmentLocalStorage(void* env, void* data_ptr);

// jvmtiError (JNICALL *SetEnvironmentLocalStorage) (jvmtiEnv* env,const void* data);
int SetEnvironmentLocalStorage(void* env, void* data);

// jvmtiError (JNICALL *AddToBootstrapClassLoaderSearch) (jvmtiEnv* env,const char* segment);
int AddToBootstrapClassLoaderSearch(void* env, void* segment);

// jvmtiError (JNICALL *SetVerboseFlag) (jvmtiEnv* env,jvmtiVerboseFlag flag,jboolean value);
int SetVerboseFlag(void* env, void* flag, void* value);

// jvmtiError (JNICALL *AddToSystemClassLoaderSearch) (jvmtiEnv* env,const char* segment);
int AddToSystemClassLoaderSearch(void* env, void* segment);

// jvmtiError (JNICALL *RetransformClasses) (jvmtiEnv* env,jint class_count,const jclass* classes);
int RetransformClasses(void* env, int class_count, void* classes);

// jvmtiError (JNICALL *GetOwnedMonitorStackDepthInfo) (jvmtiEnv* env,jthread thread,jint* monitor_info_count_ptr,jvmtiMonitorStackDepthInfo** monitor_info_ptr);
int GetOwnedMonitorStackDepthInfo(void* env, void* thread, void* monitor_info_count_ptr, void* monitor_info_ptr);

// jvmtiError (JNICALL *GetObjectSize) (jvmtiEnv* env,jobject object,jlong* size_ptr);
int GetObjectSize(void* env, void* object, void* size_ptr);

// jvmtiError (JNICALL *GetLocalInstance) (jvmtiEnv* env,jthread thread,jint depth,jobject* value_ptr);
int GetLocalInstance(void* env, void* thread, int depth, void* value_ptr);

// jvmtiError (JNICALL *SetHeapSamplingInterval) (jvmtiEnv* env,jint sampling_interval);
int SetHeapSamplingInterval(void* env, int sampling_interval);

#ifdef __cplusplus
} // extern "C"
#endif
#endif
